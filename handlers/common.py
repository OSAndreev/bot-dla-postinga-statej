from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message
import openai
import requests
from bs4 import BeautifulSoup
from handlers import tools
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from keyboards.simple_row import make_row_keyboard, post_from_post_button
import httpx

router = Router()
scheduler = AsyncIOScheduler()
client = openai.OpenAI(
    api_key='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',
    http_client=httpx.Client(
        proxies="socks5://andreevos22:MJkXWdZjik@166.1.10.179:50101"
    ),
)


class CurrentFunction(StatesGroup):
    editing_post = State()
    making_post = State()
    parsing_channels = State()
    adding_channels = State()
    limiting_posts = State()
    first_parsing_channels = State()
    showing_posts = State()
    filtering_posts_by_type = State()
    filtering_posts_by_words = State()
    getting_post_from_post = State()


@router.message(Command("start"))
async def start(message: Message):
    await message.answer(
        text="–ü—Ä–∏–≤–µ—Ç! –ú–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏: \n"
             "1) –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å—Ç-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –Ω–∞ —Å—Ç–∞—Ç—å—é, –Ω–∞–ø–∏—à–∏ \"‚úçÔ∏è–°–¥–µ–ª–∞—Ç—å –ø–æ—Å—Ç\" \n"
             "2) –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª—ã, —É –∫–æ—Ç–æ—Ä—ã—Ö –Ω—É–∂–Ω–æ —Å–ø–∞—Ä—Å–∏—Ç—å –ø–æ—Å—Ç—ã, –Ω–∞–ø–∏—à–∏ \"üì¢–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª—ã\"",
        reply_markup=make_row_keyboard(["‚úçÔ∏è–°–¥–µ–ª–∞—Ç—å –ø–æ—Å—Ç", "üì¢–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª—ã"])
    )


@router.message(F.text.lower() == "üì¢–¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª—ã")
async def answer_add_channels(message, state):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å —Ç–µ–≥–∏ –∫–∞–Ω–∞–ª–æ–≤, –ø–æ—Å—Ç—ã —Å –∫–æ—Ç–æ—Ä—ã—Ö –Ω—É–∂–Ω–æ —Å–ø–∞—Ä—Å–∏—Ç—å, –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª")
    await state.set_state(CurrentFunction.adding_channels)


@router.message(CurrentFunction.adding_channels)
async def adding_channels(message, state):
    await state.update_data(channels=await tools.extract_channels(message.text))
    await message.answer("–û—Ç–ø—Ä–∞–≤—å —á–∏—Å–ª–æ - –≥–ª—É–±–∏–Ω—É –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ—Å—Ç–æ–≤",
                         reply_markup=make_row_keyboard(["10", "30", "50", "100", "200"]))
    await state.set_state(CurrentFunction.limiting_posts)


@router.message(CurrentFunction.limiting_posts)
async def limiting_channels(message, state):
    await state.update_data(limit=int(message.text), updating_channels=False)
    await parsing_channels(message, state)
    await set_order_by(message, state)


@router.message(F.text.lower() == "üèÜ—Ç–æ–ø –ø–æ—Å—Ç–æ–≤")
async def set_order_by(message, state):
    await message.answer("–ü–æ –∫–∞–∫–æ–π –º–µ—Ç—Ä–∏–∫–µ —Ç–µ–±–µ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Ç–æ–ø?",
                         reply_markup=make_row_keyboard(["üëÄVR", "‚ù§Ô∏è–†–µ–∞–∫—Ü–∏–∏"]))
    await state.set_state(CurrentFunction.filtering_posts_by_type)


@router.message(CurrentFunction.filtering_posts_by_type)
async def set_filter_by_type(message, state):
    if '—Ä–µ–∞–∫—Ü' in message.text.lower():
        metric = "reactions"
    if any(word in message.text.lower() for word in ['–ø—Ä–æ—Å–º–æ—Ç—Ä—ã', 'vr']):
        metric = "vr"
    await state.update_data(metric=metric)
    await message.answer("–¢–µ–±–µ –Ω—É–∂–Ω—ã –ø–æ—Å—Ç—ã —Å–æ —Å—Å—ã–ª–∫–∞–º–∏ –∏–ª–∏ —Å —Ç–µ–∫—Å—Ç–æ–º?",
                         reply_markup=make_row_keyboard(['üîó–°—Å—ã–ª–∫–∏', 'üìÑ–¢–µ–∫—Å—Ç', '–í—Å–µ –ø–æ—Å—Ç—ã']))
    await state.set_state(CurrentFunction.filtering_posts_by_words)


@router.message(CurrentFunction.filtering_posts_by_words)
async def set_filter_by_words(message, state):
    global post_type
    if '—Å—Å—ã–ª–∫–∏' in message.text.lower():
        post_type = 'links'
    elif '—Ç–µ–∫—Å—Ç' in message.text.lower():
        post_type = 'text_type'
    elif '–≤—Å–µ' in message.text.lower():
        post_type = False
    await message.answer("–í–≤–µ–¥–∏ —Å–ª–æ–≤–∞/—Å–ª–æ–≤–æ—Å–æ—á–µ—Ç–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å—Å—è –≤ –ø–æ—Å—Ç–µ, —á–µ—Ä–µ–∑ ;",
                         reply_markup=make_row_keyboard(['–ë–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞']))
    await state.set_state(CurrentFunction.showing_posts)


@router.message(CurrentFunction.showing_posts)
async def show_posts(message, state):
    global post_type
    if '–±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞' in message.text.lower():
        word_filter = None
    else:
        word_filter = message.text.split(';')
    user_data = await state.get_data()
    post_list = await tools.sorted_posts(user_data['post_dict'], order_by=user_data['metric'],
                                         post_type=post_type, word_filter=word_filter)
    print('post_list', len(post_list))
    for post in post_list[: min(len(post_list), 10)]:
        await message.answer(
            "–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å—Ç: " + f"https://t.me/{post['channel_name']}/{post['id']}" + "\n" +
            "–†–µ–∞–∫—Ü–∏–π: " + str(post['reactions']) + "\n" + "–°—Å—ã–ª–∫–∏:" + '\n'.join(post['links']) + "\n",
            reply_markup=post_from_post_button(post['channel_name'], post['id']))
    await state.set_state(state=None)
    await choose_action(message)


async def choose_action(message):
    await message.answer("–ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å?",
                         reply_markup=make_row_keyboard(["‚úçÔ∏è–°–¥–µ–ª–∞—Ç—å –ø–æ—Å—Ç", "üèÜ–¢–æ–ø –ø–æ—Å—Ç–æ–≤", "‚ôªÔ∏è–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤"]))


async def parsing_channels(message, state):
    user_data = await state.get_data()
    channels = user_data['channels']
    limit = user_data['limit']
    await message.answer("–ù–∞—á–∞–ª –ø–∞—Ä—Å–∏—Ç—å...",
                         parse_mode="Markdown")
    post_dict = await tools.get_posts(channels, limit=limit)
    await state.update_data(post_dict=post_dict)
    await state.set_state(state=None)
    if not user_data['updating_channels']:
        scheduler.add_job(update_posts, "interval", hours=24, args=(state,))
        await state.update_data(updating_channels=True)


@router.message(F.text.lower() == "‚úçÔ∏è—Å–¥–µ–ª–∞—Ç—å –ø–æ—Å—Ç")
async def link_for_post(message, state):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ —Å—Ç–∞—Ç—å—é")
    await state.set_state(CurrentFunction.making_post)


@router.message(F.text.lower() == "‚ôªÔ∏è–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤")
async def update_channels(message, state):
    await message.answer("–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    await choose_action(message)
    # await state.set_state(CurrentFunction.making_post)


@router.message(CurrentFunction.making_post)
async def making_post(message: Message):
    global client
    global messages
    model = "gpt-3.5-turbo"  # –ü–æ–¥–∫–ª—é—á–∞–µ–º ChatGPT
    # –ü–æ–ª—É—á–∞–µ–º HTML-–∫–æ–¥ —Å—Ç–∞—Ç—å–∏
    url = message.text
    # –ï—Å–ª–∏ –≤ –∑–∞–ø—Ä–æ—Å–µ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∞ - –ø–∞—Ä—Å–∏–º, –∏–Ω–∞—á–µ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
    if '/' in url:
        messages = []
        response = requests.get(url)
        html = response.text

        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç BeautifulSoup
        soup = BeautifulSoup(html, 'html.parser')
        # –ù–∞—Ö–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç—ã, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—å–∏
        await message.answer('–ü–∞—Ä—Å–∏–º —Å—Ç–∞—Ç—å—é...')
        article_elements = soup.find_all('article')
        header_elements = soup.find_all('h1')  # –°—á–∏—Ç–∞–µ–º –µ—â–µ –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        # –°–æ–±–µ—Ä–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –æ–¥–Ω—É —Å—Ç–∞—Ç—å—é
        article_text = ''
        header_text = ''
        for element in article_elements:
            article_text += '\n' + element.get_text()

        for element in header_elements:
            header_text += '\n' + element.get_text()
        await message.answer('–°—Ç–∞—Ç—å—è –ø–æ–ª—É—á–µ–Ω–∞! –î–µ–ª–∞–µ–º –ø–æ –Ω–µ–π summary...')
        article_summary = await tools.summarization(article_text)
        await message.answer('–°–∞–º–º–∞—Ä–∏ —Å–¥–µ–ª–∞–Ω–æ!')

        # Prompt - —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –º—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–π—Ä–æ—Å–µ—Ç–∏, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –æ—Ç –Ω–µ–µ –Ω—É–∂–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏.

        prompt = "–ü—Ä–µ–¥—Å—Ç–∞–≤—å, —á—Ç–æ —Ç—ã –∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª–∞. –£ —Ç–µ–±—è –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤ –ø–æ—Å—Ç–æ–≤ –≤ —Å–≤–æ–π —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª –ø–æ —Å—Ç–∞—Ç—å—è–º." \
                 "–°–Ω–∞—á–∞–ª–∞ —Ç—ã –ø–æ—Å–º–æ—Ç—Ä–∏—à—å –∏—Ö, –∞ –∑–∞—Ç–µ–º —Ç–µ–±–µ –Ω–∞–¥–æ –±—É–¥–µ—Ç –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–∞–∫–æ–π –∂–µ –∫–æ—Ä–æ—Ç–∫–∏–π –ø–æ—Å—Ç –ø—Ä–æ —Å—Ç–∞—Ç—å—é," \
                 "–∫–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–π —è –æ—Ç–ø—Ä–∞–≤–ª—é —Ç–µ–±–µ. –í–æ—Ç –ø—Ä–∏–º–µ—Ä—ã –∫–æ—Ä–æ—Ç–∫–∏—Ö –ø–æ—Å—Ç–æ–≤: "
        with open('post_examples.txt', 'r', encoding='utf-8') as file:
            posts = file.read()

        messages.append(
            {"role": "assistant",
             "content": prompt + posts})  # assistant - –∑–Ω–∞—á–∏—Ç –æ–Ω —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç."role" (—Ä–æ–ª—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è - "system", "user" –∏–ª–∏ "assistant") –∏ "content" (—Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è).

    else:
        messages.append({"role": "assistant", "content": message.text})
        await message.answer('–ü—Ä–∞–≤–∫–∏ –ø—Ä–∏–Ω—è—Ç—ã –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ')
    try:
        # –ï—Å–ª–∏ –≤ –∑–∞–ø—Ä–æ—Å–µ –±—ã–ª–∞ —Å—Å—ã–ª–∫–∞, —Ç–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –Ω–µ–π
        if '/' in message.text:
            # –î–æ–±–∞–≤–ª—è–µ–º –∫ —Å–æ–æ–±—â–µ–Ω–∏—è–º —Å—Ç–∞—Ç—å—é

            soobsh = "–¢–µ–ø–µ—Ä—å –ø–æ –ø—Ä–∏–º–µ—Ä—É –ø–æ—Å—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —è –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–±–µ, –Ω–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–∏–π –ø–æ—Å—Ç (–º–∞–∫—Å–∏–º—É–º 200 —Ç–æ–∫–µ–Ω–æ–≤) –ø–æ —ç—Ç–æ–π —Å—Ç–∞—Ç—å–µ (–∫–æ—Ç–æ—Ä—É—é –ø–∏—Å–∞–ª –Ω–µ —è), " \
                     "—á—Ç–æ–±—ã –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª–∞ –≤ –ø—Ä–æ—á—Ç–µ–Ω–∏–∏ —Å—Ç–∞—Ç—å–∏." \
                     " –í –Ω–∞—á–∞–ª–µ –Ω–∞–ø–∏—à–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫, –∏ –æ–∫—Ä—É–∂–∏ –µ–≥–æ —Å–∏–º–≤–æ–ª–∞–º–∏ '*'. –í–∞–∂–Ω—ã–µ —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ —Å—Ç–æ–∏–ª–æ –±—ã –≤—ã–¥–µ–ª–∏—Ç—å, –æ–∫—Ä—É–∂–∏ —Å–∏–º–≤–æ–ª–∞–º–∏ '*'.–ò—Å–ø–æ–ª—å–∑—É–π —Å–º–∞–π–ª–∏–∫–∏ –≤ —É–º–µ—Ä–µ–Ω–Ω–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ. –í –∫–æ–Ω—Ü–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–ø–∏—à–∏ \"–°—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç–∞—Ç—å—é:{0}\": \n".format(
                url) \
                     + "–ó–∞–≥–æ–ª–æ–≤–æ–∫: " + header_text + "\n" \
                     + "–¢–µ–∫—Å—Ç —Å—Ç–∞—Ç—å–∏: " + "\n" + article_summary
            if len(soobsh) >= 2500:
                soobsh = soobsh[:2500]
            messages.append(
                {"role": "assistant", "content": soobsh  # –£–∫–æ—Ä–∞—á–∏–≤–∞–µ–º, —á—Ç–æ–±—ã ChatGPT –Ω–µ —Ä—É–≥–∞–ª—Å—è
                 }
            )
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–º—É –≤—Å–µ –≤–º–µ—Å—Ç–µ
            await message.answer('–î–µ–ª–∞–µ–º –ø–æ—Å—Ç...')
            completion = client.chat.completions.create(model=model,
                                                        messages=messages,
                                                        )
        else:
            completion = client.chat.completions.create(model=model,
                                                        messages=messages,
                                                        )
        # completion.choices –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π —Å–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤, —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–æ–¥–µ–ª—å—é —á–∞—Ç-–±–æ—Ç–∞. –ö–∞–∂–¥—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–≤–æ–π—Å—Ç–≤–æ message, –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–≤—É–º—è —Å–≤–æ–π—Å—Ç–≤–∞–º–∏: role (—Ä–æ–ª—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è) –∏ content (—Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è).
        # –ú—ã –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π (–Ω—É–ª–µ–≤–æ–π) —ç–ª–µ–º–µ–Ω—Ç-–ø–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞, —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–æ–¥–µ–ª—å—é.
        await message.answer("–ü–æ—Å—Ç —Å–¥–µ–ª–∞–Ω!")
        decoded_response = completion.choices[0].message.content.encode('utf-8').decode('utf-8')
        messages.append({"role": "assistant",
                         "content": decoded_response})
        await message.answer(decoded_response,
                             parse_mode='Markdown')
    # –ï—Å–ª–∏ —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å—ã, –æ–Ω –Ω–∞—á–∏–Ω–∞–µ—Ç —Ä—É–≥–∞—Ç—å—Å—è
    except openai.RateLimitError:
        await message.answer('–õ–∏–º–∏—Ç –ø–æ –≤—Ä–µ–º–µ–Ω–∏, –Ω–∞–ø–∏—à–∏ –µ—â–µ —Ä–∞–∑')
    except openai.InternalServerError:
        await message.answer('–°–µ—Ä–≤–µ—Ä–∞ OpenAI –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –ø–æ–≤—Ç–æ—Ä–∏ –ø–æ–∑–∂–µ')


async def update_posts(state):
    user_data = await state.get_data()
    post_dict = user_data['post_dict']
    channels = user_data['channels']
    post_dict = await tools.updated_posts(channels, post_dict)
    await state.update_data(post_dict=post_dict)


@router.callback_query(F.data.startswith("post_from_post"))
async def get_post_from_post(callback, state):

    global client
    global messages
    model = "gpt-3.5-turbo"
    message = callback.message
    messages = []
    channel = callback.data.split('.')[1]
    post_id = int(callback.data.split('.')[2])
    user_data = await state.get_data()
    post_text = user_data['post_dict'][channel][post_id]['text']
    prompt = "–ü—Ä–µ–¥—Å—Ç–∞–≤—å, —á—Ç–æ —Ç—ã –∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª–∞. –¢–µ–±–µ –ø–æ–∫–∞–∑–∞–ª—Å—è –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º " \
             "–∏ –ø–æ–ª–µ–∑–Ω—ã–º –ø–æ—Å—Ç —Å –¥—Ä—É–≥–æ–≥–æ –∫–∞–Ω–∞–ª–∞ @{0}, –∏ —Ç—ã —Ö–æ—á–µ—à—å —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ–Ω –Ω–µ–º" \
             "—Å–≤–æ–∏–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º (–Ω–æ –Ω–µ –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é). –£–ø–æ–º—è–Ω–∏ –∫–æ—Ä–æ—Ç–∫–æ, " \
             "–æ —á–µ–º –æ–Ω, –ø–æ—á–µ–º—É –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–µ–Ω, –∏ –æ—Å—Ç–∞–≤—å —Ç–µ–≥ –∫–∞–Ω–∞–ª–∞, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ " \
             "–±—ã–ª –≤–∑—è—Ç —ç—Ç–æ—Ç –ø–æ—Å—Ç. –í–æ—Ç —Å–∞–º –ø–æ—Å—Ç, –æ–Ω –≤ —Ä–∞–∑–º–µ—Ç–∫–µ Markdown: {1}".format(channel, post_text)


    messages.append(
        {"role": "assistant",
         "content": prompt})  # assistant - –∑–Ω–∞—á–∏—Ç –æ–Ω —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç."role" (—Ä–æ–ª—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è - "system", "user" –∏–ª–∏ "assistant") –∏ "content" (—Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è).

    try:
        await message.answer("–î–µ–ª–∞–µ–º –ø–æ—Å—Ç...")
        await callback.answer()
        completion = client.chat.completions.create(model=model,
                                                    messages=messages,
                                                    )
        await message.answer("–ü–æ—Å—Ç —Å–¥–µ–ª–∞–Ω!")
        decoded_response = completion.choices[0].message.content.encode('utf-8').decode('utf-8')
        messages.append({"role": "assistant",
                         "content": decoded_response})
        await message.answer(decoded_response)
    # –ï—Å–ª–∏ —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å—ã, –æ–Ω –Ω–∞—á–∏–Ω–∞–µ—Ç —Ä—É–≥–∞—Ç—å—Å—è
    except openai.RateLimitError:
        await message.answer('–õ–∏–º–∏—Ç –ø–æ –≤—Ä–µ–º–µ–Ω–∏, –Ω–∞–ø–∏—à–∏ –µ—â–µ —Ä–∞–∑')
    except openai.InternalServerError:
        await message.answer('–°–µ—Ä–≤–µ—Ä–∞ OpenAI –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –ø–æ–≤—Ç–æ—Ä–∏ –ø–æ–∑–∂–µ')

    await state.set_state(CurrentFunction.editing_post)
